package main

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
import (
	"bufio"   // –ü–∞–∫–µ—Ç –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
	"fmt"     // –ü–∞–∫–µ—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞
	"os"      // –ü–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
	"strconv" // –ü–∞–∫–µ—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞
	"strings" // –ü–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏

	"gorm.io/driver/mysql" // –î—Ä–∞–π–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MySQL/MariaDB
	"gorm.io/gorm"         // ORM –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

	"connect/Secret" // –ü–∞–∫–µ—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É usergovnas, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
type usergovnas struct {
	ID       uint   `gorm:"primarykey"` // –ü–æ–ª–µ ID - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á —Ç–∞–±–ª–∏—Ü—ã
	Name     string `gorm:"size:255"`   // –ü–æ–ª–µ Name - —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤
	Sex      string `gorm:"size:10"`    // –ü–æ–ª–µ Sex - —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
	Sumgavna uint   // –ü–æ–ª–µ Sumgavna - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–∞
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	dsn := config.GetDSN()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è GORM –∏ MySQL –¥—Ä–∞–π–≤–µ—Ä
	// db - –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, err - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if err != nil {
		println("‚ùå FAILED TO CONNECT DATABASE") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
		return                                  // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ main
	}
	println("‚úÖ DATABASE CONNECTED SUCCESSFULLY") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã usergovnas –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	// AutoMigrate —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	err = db.AutoMigrate(&usergovnas{})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
	if err != nil {
		println("‚ùå FAILED TO MIGRATE DATABASE") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏
		return                                  // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ main
	}
	println("‚úÖ DATABASE MIGRATED SUCCESSFULLY") // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏

	// –°–æ–∑–¥–∞–µ–º —Ä–∏–¥–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Å–æ–ª–∏
	reader := bufio.NewReader(os.Stdin)

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
	for {
		// –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
		fmt.Println("\n=== –ú–ï–ù–Æ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–ï–ô ===")
		fmt.Println("1 - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
		fmt.Println("2 - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏")
		fmt.Println("0 - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
		fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

		// –ß–∏—Ç–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		choice, _ := reader.ReadString('\n')
		choice = strings.TrimSpace(choice) // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		switch choice {
		case "1":
			addNewRecord(db, reader) // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
		case "2":
			showAllRecords(db) // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
		case "0":
			fmt.Println("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...") // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
			return                                 // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
		default:
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞") // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—ã–±–æ—Ä–∞
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
func addNewRecord(db *gorm.DB, reader *bufio.Reader) {
	fmt.Println("\n--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ ---")

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
	name, _ := reader.ReadString('\n')
	name = strings.TrimSpace(name) // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª (male/female): ")
	sex, _ := reader.ReadString('\n')
	sex = strings.TrimSpace(sex) // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ Sumgavna
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ Sumgavna: ")
	sumgavnaStr, _ := reader.ReadString('\n')
	sumgavnaStr = strings.TrimSpace(sumgavnaStr) // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
	sumgavna, err := strconv.Atoi(sumgavnaStr)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞: Sumgavna –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!") // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	newUser := usergovnas{
		Name:     name,
		Sex:      sex,
		Sumgavna: uint(sumgavna), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º int –≤ uint
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	result := db.Create(&newUser)
	if result.Error != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", result.Error) // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		return
	}

	// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
	fmt.Printf("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: %d\n", newUser.ID)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
func showAllRecords(db *gorm.DB) {
	fmt.Println("\n--- –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ ---")

	// –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
	var user []usergovnas

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	result := db.Find(&user)
	if result.Error != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:", result.Error) // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
	if len(user) == 0 {
		fmt.Println("üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞") // –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
		return
	}

	// –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
	for _, user := range user {
		fmt.Printf("ID: %d | Name: %s | Sex: %s | Sumgavna: %d\n",
			user.ID, user.Name, user.Sex, user.Sumgavna)
	}

	// –í—ã–≤–æ–¥–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
	fmt.Printf("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d\n", len(user))
}
